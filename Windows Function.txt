CREATE TABLE employee (emp_id INTEGER PRIMARY KEY, emp_name VARCHAR (255), dept_name VARCHAR(255), salary INTEGER);

INSERT INTO employee VALUES (101, 'Mohan', 'Admin', 4000);
INSERT INTO employee VALUES (102, 'Rajkumar', 'HR', 3000);
INSERT INTO employee VALUES (103, 'Akhil', 'IT', 4000);
INSERT INTO employee VALUES (104, 'Darvin', 'Finance', 6500);
INSERT INTO employee VALUES (105, 'Rohit', 'HR', 3000);
INSERT INTO employee VALUES (106, 'Rajesh', 'Finance', 5000);
INSERT INTO employee VALUES (107, 'Manish', 'Admin', 4000);
INSERT INTO employee VALUES (108, 'Raj', 'IT', 4000);
INSERT INTO employee VALUES (109, 'Ankit', 'IT', 4000);
INSERT INTO employee VALUES (110, 'Daryav', 'IT', 6700);
INSERT INTO employee VALUES (111, 'Rohan', 'HR', 3300);
INSERT INTO employee VALUES (112, 'Ram', 'Finance', 5500);
INSERT INTO employee VALUES (113, 'Daryav', 'Admin', 6900);
INSERT INTO employee VALUES (114, 'Rohan', 'Finance', 3100);


--------------------------------------------------------------------------------------------------------------------------

-- Window functions
--select * from employee
--Now what if we want an employeees who has max salary departmentwise
--select max(e.salary), dept_name from employee e
--group by (dept_name);
--but in above we cannot have other information and hence we can obtain other information over this information using analytical/window functions

--select e.*,
--max(e.salary) over() as max_salary
--from employee e;
--this over() will gives a window of records. we are telling sql to consider max(salary) as a window/analtyical function using over CLAUSE()

--now we want max salary for every unique department in such cas we will use PARTITION BY

--select e.*,
--max(e.salary) over(partition by dept_name) as max_salary
--from employee e;

-- common window functions
--row_numer, rank, dense_rank, lead and lag

--row_number () can be useful where we want records are assign via unique number. Every row has unique number and more over we can sort out it using different condition. for example

--select e.*,
--row_number() over() 
--from employee e;
--the output u see here has new column named as row_number and every record has unique number now what if we want according to department name, we can do that as well

--select e.*,
--row_number() over(partition by dept_name) as rn 
--from employee e;

--the ouput from this query, you will see records are sorted out but now problem is emp_id aren't unique and that's why we need to sort that out as well

--select e.*,
--row_number() over(partition by dept_name order by emp_id) as rn 
--from employee e;
-- now here emp_id, dept_name (and now_number() which is already in ordered manner) are sorted out.

--now suppose if we have question,
--Fetch the first 2 employees from each department to join the company
--we can solve this problem using subquery, we laready have data in which we have rn column which showing first two employee who joined.
--Our strategy would be putting that into main query as follows

--select e.*,
--row_number() over(partition by dept_name order by emp_id) as rn
--from employee e;

--select *
--from (subquery)
--where 'something' <3;
--this would be our structure

--select *
--from (
--		select e.*,
--row_number() over(partition by dept_name order by emp_id) as rn
--from employee e
--) as y
--where y.rn <3;

--RANK()
--now we want to fetch the top 3 employees in each department earning the max salary..we can achieve this using RANK()
--Interesting fact about rank() is it's gonna skipp the records if he found records more than 2 times..for example employee1 with salary 20k and employee2 with salary 20k then if there is employee3 from same department with salary 20k then rank will skipp this third employee.

--select e.*,
--rank() over(partition by dept_name order by salary desc) as rnk
--from employee e;
--the output is we are getting rank of employeesdepartment by department where max_salary is ranked at first.

--structure->

--select *
--from (subquery)
--where 'something' < 4; --as per problem that given to us

--select *
--from (
--		select e.*,
--		rank() over(partition by dept_name order by salary desc) as rnk
--		from employee e
--) as y
--where y.rnk < 4;
--using RANK() and subquery we get desire result

--DENSE_RANK()
-- in RANK() as we saw, the duplicate value got skipped and hence rank assign employee4 as rank 4 instead of 3, but in dense_rank() employee4 gets value 3

--select e.*,
--rank() over(partition by dept_name order by salary desc) as rnk,
--dense_rank() over(partition by dept_name order by salary desc) as --DENSE_rnk
--from employee e;

--while writing this, I missed to add similary salary froms ame department however it will be good tas for you if just add such value to see the optimum result of dense_rank()

--Now question is why we are not assigning any value to rank(), dense_rank() and row_number()? the answer is these clause has only work of assigning value whatever coming in from over() clause to select() clause.

--Now if you are having confusion then do fire below query and see the differece of ranks in every column,

--select e.*,
--rank() over(partition by dept_name order by salary desc) as rnk,
--dense_rank() over(partition by dept_name order by salary desc) as DENSE_rnk,
--row_number() over(partition by dept_name order by salary desc) as rn
--from employee e;

--LAG()
--to understand this function let's solve below question:
--fetch a query to display if the salary of an employee is higher, lower or equal to the previous employee

--select e.*,
--lag(salary) over(partition by dept_name order by emp_id) as emp_sal_prv 
--from employee e;
--basically it's showing the salary of previous employee from department and it's order by emp_id
-- now we can have fro the last two employee instaed of just previous one
--select e.*,
--lag(salary, 2 , 0) over(partition by dept_name order by emp_id) as prv_sal_emp
--from employee e;

--LEAD()
--lead works the same as lag, difference is it will show next record

--select e.*,
--lead(salary) over(partition by dept_name order by emp_id ) as next_emp_sal
--from employee e;

-- now let's make query which says higher or lower salary

--select e.*,
--lag(salary) over(partition by dept_name order by emp_id) as prv_emp_sal,
--case 
--	when e.salary > lag(salary) over(partition by dept_name order by 		emp_id) then 'Higher Salary than Previous Employee'
--    when e.salary < lag(salary) over(partition by dept_name order by 		emp_id) then 'Lower Salary than Previous Employee'
--    when e.salary = lag(salary) over(partition by dept_name order by 		emp_id) then 'Same Salary than Previous Employee'

--end as salary_remark
--from employee e;






